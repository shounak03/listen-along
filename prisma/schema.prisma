// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          Int               @id @default(autoincrement())
  username    String            @unique
  email       String            @unique
  password    String
  avatar      String?
  createdAt   DateTime          @default(now())
  spaces      Space[]           @relation("CreatedSpaces")
  memberships SpaceMembership[]
  songs       Song[]
  votes       Vote[]
}

model Space {
  id          Int               @id @default(autoincrement())
  name        String
  description String
  url         String            @unique @default("")
  createdAt   DateTime          @default(now())
  creatorId   Int
  creator     User              @relation("CreatedSpaces", fields: [creatorId], references: [id])
  members     SpaceMembership[]
  songs       Song[]
}

model SpaceMembership {
  id       Int      @id @default(autoincrement())
  userId   Int
  spaceId  Int
  joinedAt DateTime @default(now())
  user     User     @relation(fields: [userId], references: [id])
  space    Space    @relation(fields: [spaceId], references: [id])

  @@unique([userId, spaceId])
}

model Song {
  id        Int      @id @default(autoincrement())
  url       String
  source    String // 'spotify' or 'youtube'
  addedById Int
  spaceId   Int
  addedAt   DateTime @default(now())
  addedBy   User     @relation(fields: [addedById], references: [id])
  space     Space    @relation(fields: [spaceId], references: [id])
  votes     Vote[]
}

model Vote {
  id       Int      @id @default(autoincrement())
  userId   Int
  songId   Int
  voteType String // 'upvote' or 'downvote'
  votedAt  DateTime @default(now())
  user     User     @relation(fields: [userId], references: [id])
  song     Song     @relation(fields: [songId], references: [id])

  @@unique([userId, songId])
}
